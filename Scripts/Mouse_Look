using UnityEngine;
using System.Collections;


/// MouseLook rotates the transform based on the mouse delta.
/// Minimum and Maximum values can be used to constrain the possible rotation

/// To make an FPS style character:
/// - Create a capsule.
/// - Add the MouseLook script to the capsule.
///   -> Set the mouse look to use LookX. (You want to only turn character but not tilt it)
/// - Add FPSInputController script to the capsule
///   -> A CharacterMotor and a CharacterController component will be automatically added.

/// - Create a camera. Make the camera a child of the capsule. Reset it's transform.
/// - Add a MouseLook script to the camera.
///   -> Set the mouse look to use LookY. (You want the camera to tilt up and down like a head. The character already turns.)
[AddComponentMenu("Camera-Control/Mouse Look")]
public class MouseLook : MonoBehaviour {

	public enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }
	public RotationAxes axes = RotationAxes.MouseX;
	public float sensitivityX = 0.1f;
	public float sensitivityY = 340f;

	//public float minimumX = -360F;
	//public float maximumX = 360F;

	//public float minimumY = -60F;
	//public float maximumY = 60F;

	[SerializeField]
	public float minimumAngle = -40f;
	[SerializeField]
	public float maximumAngle = 60f;

	private Transform _myxform;

	float rotationY = 0F;
	float rotationX = 0F;
	/*
	void Update ()
	{
		if (axes == RotationAxes.MouseXAndY)
		{
			float rotationX = transform.localEulerAngles.y + Input.GetAxis("Mouse X") * sensitivityX;
			
			rotationY += Input.GetAxis("Mouse Y") * sensitivityY;
			rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);
			
			transform.localEulerAngles = new Vector3(-rotationY, rotationX, 0);
		}
		else if (axes == RotationAxes.MouseX)
		{
			transform.Rotate(0, Input.GetAxis("Mouse X") * sensitivityX, 0);
		}
		else
		{
			//rotationY += Input.GetAxis("Mouse Y") * sensitivityY;
			//rotationY = Mathf.Clamp (rotationY, minimumY, maximumY);
			rotationY -= Input.GetAxis(PlayerInput.RightY) * sensitivity;			// z,c for Y axis
			rotationY = Mathf.Clamp (rotationY, minimumAngle, maximumAngle);		// clamps rotationY between minimumAngle, MaximumAnlge
			//_cameraTargetObject.Xform.localEulerAngles = new Vector3(-rotationY, _cameraTargetObject.Xform.localEulerAngles.y, 0);
			transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);
			//transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);
		}
	}
	*/
	void Start() {

		// Make the rigid body not change rotation
		if (rigidbody)
			rigidbody.freezeRotation = true;

		_myxform = this.GetComponent<Transform> ();

	}


	void Update(){

		if (axes == RotationAxes.MouseX)
		{
			//X axis
			if (Input.GetAxis("RightX") > 0.1f || Input.GetAxis("RightX") < -0.1f){

				Debug.Log("rotating x axis");
				//_myxform.Rotate (0f, Input.GetAxis("RightX")*sensitivityX*Time.deltaTime,0f);
				_myxform.Rotate (0f, Input.GetAxis("RightX")*sensitivityX,0f);

				//rotationY -= Input.GetAxis("RightX") * sensitivityX*Time.deltaTime;			// z,c for Y axis
				//rotationY = Mathf.Clamp (rotationX, minimumAngle, maximumAngle);		// clamps rotationY between minimumAngle, MaximumAnlge
				//transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.x, 0);
			}
		}
		else if (axes == RotationAxes.MouseY)
		{
			//Y axis
			rotationY -= Input.GetAxis ("RightY") * sensitivityY*Time.deltaTime;			// q,e for X axis
			rotationY = Mathf.Clamp (rotationY, minimumAngle, maximumAngle);
			transform.localEulerAngles = new Vector3 (-rotationY, transform.localEulerAngles.y, 0);

		}
		/*
		//X axis
		rotationY -= Input.GetAxis("RightY") * sensitivityY;			// q,e for Y axis
		rotationY = Mathf.Clamp (rotationY, minimumAngle, maximumAngle);		// clamps rotationY between minimumAngle, MaximumAnlge
		transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);
		*/
	}

}




